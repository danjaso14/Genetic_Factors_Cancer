original_data_50thres[, column] <- ifelse(is.na(original_data_50thres[,column]) == TRUE,
na_mean(original_data_50thres[,column],option = "mode"),
original_data_50thres[,column])
}
## Elimininate columns that are highly correlated
corr <- cor(original_data_50thres[,1:length(original_data_50thres)])
highCorr <- findCorrelation(corr, cutoff = .99, names = T)
clean_data <- original_data_50thres[, !names(original_data_50thres) %in% highCorr]
# data_proc <- data.frame(cbind(clean_data, phenotype=y))
# table(data_proc$phenotype)
y <- ifelse(y == "cancer", 1, 0)
table(y)
pca_varimax <- principal(clean_data, nfactors = 3, rotate = "varimax")
rotation3 <- data.frame(cbind(pca_varimax$score, phenotype= y))
pca_varimax$loadings
# pca_varimax$Vaccounted
intrain <- createDataPartition(y = rotation3$phenotype, p= 0.7, list = FALSE)
training <- rotation3[intrain,]
testing <- rotation3[-intrain,]
dim(training); dim(testing)
table(training$phenotype) ; table(testing$phenotype)
training$phenotype <- as.factor(training$phenotype)
testing$phenotype <- as.factor(testing$phenotype)
levels(training$phenotype) <- c("F", "T")
levels(testing$phenotype) <- c("F", "T")
trctrl <- trainControl(summaryFunction=twoClassSummary,classProbs = TRUE,# Use AUC to pick the best model
savePredictions = T, method = "cv", number = 3)
log_mod <- train( form = phenotype ~ .,
data = training,
trControl = trctrl,
method = "glm",
metric = "ROC",
family = "binomial")
r <- summary(log_mod)
r
pred_log <- predict(log_mod, testing, type = 'prob')
pred_log
# pR2(log_mod)[4]
confusionMatrix(testing$phenotype, predict(log_mod, testing), positive="T")
logisticPseudoR2s(r)
logROC <- roc(testing$phenotype, pred_log[, "T"])
plot.roc(logROC, print.auc=TRUE, legacy.axes=TRUE)
rotation3$phenotype[which(rotation3$phenotype == 0)] <- 'Control'
rotation3$phenotype[which(rotation3$phenotype == 1)] <- 'Cancer'
fig <- plot_ly(rotation3, x = ~RC1, y = ~RC2, z = ~RC3, color = ~as.factor(phenotype) ,
colors = c('#BF382A','#0C4B8E'), alpha = .6)
fig <- fig %>% add_markers()
fig <- fig %>% layout(title="3 Rotated Components Over Full Data")
fig <- fig %>% layout(scene = list(xaxis = list(title = 'RC1'),
yaxis = list(title = 'RC2'),
zaxis = list(title = 'RC3')))
fig
fig
rotation3$phenotype[which(rotation3$phenotype == 0)] <- 'Control'
rotation3$phenotype[which(rotation3$phenotype == 1)] <- 'Cancer'
fig <- plot_ly(rotation3, x = ~RC1, y = ~RC2, z = ~RC3, color = ~as.factor(phenotype) ,
colors = c('#BF382A','#0C4B8E'), alpha = .6)
fig <- fig %>% add_markers()
fig <- fig %>% layout(title="3 Rotated Components Over Top 10 SNPs")
fig <- fig %>% layout(scene = list(xaxis = list(title = 'RC1'),
yaxis = list(title = 'RC2'),
zaxis = list(title = 'RC3')))
fig
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
dim(lung)
colnames(lung)
summary(lung)
lung$hospital_expire_flag <- as.factor(lung$hospital_expire_flag)
new <- SMOTE(form = hospital_expire_flag ~ ., data = lung, perc.over = 100)
suppressMessages(library(caret))
suppressMessages(library(rpart.plot))
suppressMessages(library(pROC))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(DMwR))
suppressMessages(library(corrplot))
trctrl <- trainControl(summaryFunction=twoClassSummary,classProbs = TRUE,# Use AUC to pick the best model
savePredictions = T, method = "cv", number = 5, repeats = 3)
new <- SMOTE(form = hospital_expire_flag ~ ., data = lung, perc.over = 100)
suppressMessages(library(caret))
suppressMessages(library(rpart.plot))
suppressMessages(library(pROC))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(DMwR))
suppressMessages(library(corrplot))
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
dim(lung)
colnames(lung)
summary(lung)
lung$hospital_expire_flag <- as.factor(lung$hospital_expire_flag)
new <- SMOTE(form = hospital_expire_flag ~ ., data = lung, perc.over = 100)
table(new$hospital_expire_flag)
lung2 <- new[, c(3, 4:7, 9:12,14)]
colnames(lung2)
lung2$hospital_expire_flag <- factor(lung2$hospital_expire_flag)
intrain <- createDataPartition(y = lung2$hospital_expire_flag, p= 0.7, list = FALSE)
training <- lung2[intrain,]
testing <- lung2[-intrain,]
dim(training); dim(testing)
training$gender <- as.numeric(training$gender)
training$insurance <- as.numeric(training$insurance)
training$min_value <- as.numeric(training$min_value)
training$max_value <- as.numeric(training$max_value)
training$loinc_code <- as.numeric(training$loinc_code)
testing$gender <- as.numeric(testing$gender)
testing$insurance <- as.numeric(testing$insurance)
testing$min_value <- as.numeric(testing$min_value)
testing$max_value <- as.numeric(testing$max_value)
testing$loinc_code <- as.numeric(testing$loinc_code)
levels(training$hospital_expire_flag) <- c("F", "T")
levels(testing$hospital_expire_flag) <- c("F", "T")
set.seed(56)
## Using Radial Kernal
trctrl <- trainControl(summaryFunction=twoClassSummary,classProbs = TRUE,# Use AUC to pick the best model
savePredictions = T, method = "cv", number = 5, repeats = 3)
svmGrid <- expand.grid(sigma= 2^c(-15,-10, -5, 0), C= 2^c(0:5))
svm_Radial <- train(hospital_expire_flag ~., data = training, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
metric="ROC",
tuneGrid = svmGrid,
tuneLength = 2) #param grid 10 values C selected by caret
# svm_Radial
plot(svm_Radial)
test_pred <- predict(svm_Radial, newdata = testing, type = "prob")
confusionMatrix(factor(testing$hospital_expire_flag), predict(svm_Radial, newdata = testing), positive="T")
svmROC <- roc(testing$hospital_expire_flag, test_pred[, "T"])
plot.roc(svmROC, print.auc=TRUE, legacy.axes=TRUE)
suppressMessages(library(caret))
suppressMessages(library(rpart.plot))
suppressMessages(library(pROC))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(DMwR))
suppressMessages(library(corrplot))
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
dim(lung)
colnames(lung)
summary(lung)
lung$hospital_expire_flag <- as.factor(lung$hospital_expire_flag)
lung2 <- lung[, c(3, 4:7, 9:12,14)]
colnames(lung2)
lung2$hospital_expire_flag <- factor(lung2$hospital_expire_flag)
intrain <- createDataPartition(y = lung2$hospital_expire_flag, p= 0.7, list = FALSE)
training <- lung2[intrain,]
testing <- lung2[-intrain,]
dim(training); dim(testing)
training$gender <- as.numeric(training$gender)
training$insurance <- as.numeric(training$insurance)
training$min_value <- as.numeric(training$min_value)
training$max_value <- as.numeric(training$max_value)
training$loinc_code <- as.numeric(training$loinc_code)
testing$gender <- as.numeric(testing$gender)
testing$insurance <- as.numeric(testing$insurance)
testing$min_value <- as.numeric(testing$min_value)
testing$max_value <- as.numeric(testing$max_value)
testing$loinc_code <- as.numeric(testing$loinc_code)
# training <- training[, -3]
# testing <- testing[, -3]
levels(training$hospital_expire_flag) <- c("F", "T")
levels(testing$hospital_expire_flag) <- c("F", "T")
set.seed(56)
## Using Radial Kernal
trctrl <- trainControl(summaryFunction=twoClassSummary,classProbs = TRUE,# Use AUC to pick the best model
savePredictions = T, method = "cv", number = 5, repeats = 3)
svmGrid <- expand.grid(sigma= 2^c(-15,-10, -5, 0), C= 2^c(0:5))
svm_Radial <- train(hospital_expire_flag ~., data = training, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
metric="ROC",
tuneGrid = svmGrid,
tuneLength = 2) #param grid 10 values C selected by caret
# svm_Radial
plot(svm_Radial)
test_pred <- predict(svm_Radial, newdata = testing, type = "prob")
confusionMatrix(factor(testing$hospital_expire_flag), predict(svm_Radial, newdata = testing), positive="T")
svmROC <- roc(testing$hospital_expire_flag, test_pred[, "T"])
plot.roc(svmROC, print.auc=TRUE, legacy.axes=TRUE)
suppressMessages(library(caret))
suppressMessages(library(rpart.plot))
suppressMessages(library(pROC))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(DMwR))
suppressMessages(library(corrplot))
options(warn=1)
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
dim(lung)
colnames(lung)
summary(lung)
table(lung$gender)
table(lung$patient_age)
table(lung$ethnicity)
table(lung$insurance)
table(lung$hospital_expire_flag)
table(lung$has_chemo)
table(lung$has_radio)
table(lung$hadm_id_los)
lung_eda <- lung
# table(lung_eda$gender)
lung_eda$min_value <- as.numeric(lung_eda$min_value)
lung_eda$max_value <- as.numeric(lung_eda$max_value)
lung_eda$loinc_code <- as.numeric(lung_eda$loinc_code)
ggplot(data=lung_eda, aes(x= gender, fill = gender)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
scale_fill_manual("Gender", values = c("F" = "Red", "M" = "Blue")) +
ggtitle("Gender Distribution")
table(lung_eda$patient_age)
lung_eda$patient_age <- ifelse(lung_eda$patient_age > 89,
median(lung_eda$patient_age),
lung_eda$patient_age)
lung$patient_age <- lung_eda$patient_age
ggplot(data=lung_eda, aes(x= patient_age, fill = gender)) +
geom_histogram(stat="count", binwidth = 20, bins = 40)  +
labs(y = "frecuency") +
ggtitle("Age Distribution") +
scale_fill_manual("Gender", values = c("F" = "Red", "M" = "Blue")) +
ggtitle("Age Distribution with Gender")
# table(lung_eda$insurance)
ggplot(data=lung_eda, aes(x= ethnicity, fill = ethnicity)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
ggtitle("Ethnicity Distribution")
# table(lung_eda$insurance)
ggplot(data=lung_eda, aes(x= insurance, fill = insurance)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
ggtitle("Insurance Distribution")
# table(lung_eda$insurance)
ggplot(data=lung_eda, aes(x= loinc_code, fill = loinc_code)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
ggtitle("LOINC Code Distribution")
lung_eda$has_chemo <- as.factor(lung_eda$has_chemo)
# table(lung_eda$has_chemo)
ggplot(data=lung_eda, aes(x= has_chemo,  fill = has_chemo)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
scale_fill_manual("has_chemo", values = c("1" = "Red", "0" = "Blue")) +
ggtitle("Patient Chemotherapy Distribution")
lung_eda$has_radio <- as.factor(lung_eda$has_radio)
# table(lung_eda$has_radio)
ggplot(data=lung_eda, aes(x= has_radio, fill = has_radio)) +
geom_bar(stat="count")  +
labs(y = "frecuency") +
scale_fill_manual("has_radio", values = c("1" = "Red", "0" = "Blue")) +
ggtitle("Patient Radiotherapy Distribution")
lung_eda$hospital_expire_flag <- as.factor(lung_eda$hospital_expire_flag)
# table(lung_eda$hospital_expire_flag)
ggplot(data=lung_eda, aes(x= hospital_expire_flag,
fill = hospital_expire_flag))+
geom_bar(stat="count")  +
labs(y = "frecuency") +
scale_fill_manual("hospital_expire_flag",
values = c("1" = "Red", "0" = "Blue")) +
ggtitle("Patient Hospital Expire Flag (Deceased vs Survive) Distribution")
lung$hospital_expire_flag <- as.factor(lung$hospital_expire_flag)
new <- SMOTE(form = hospital_expire_flag ~ ., data = lung, perc.over = 100)
table(new$hospital_expire_flag)
lung2 <- new[, c(3, 4:7, 9:12,14)]
colnames(lung2)
lung2$hospital_expire_flag <- factor(lung2$hospital_expire_flag)
intrain <- createDataPartition(y = lung2$hospital_expire_flag, p= 0.7, list = FALSE)
training <- lung2[intrain,]
testing <- lung2[-intrain,]
dim(training); dim(testing)
table(training$hospital_expire_flag)
table(testing$hospital_expire_flag)
training$gender <- as.numeric(training$gender)
training$insurance <- as.numeric(training$insurance)
training$min_value <- as.numeric(training$min_value)
training$max_value <- as.numeric(training$max_value)
training$loinc_code <- as.numeric(training$loinc_code)
testing$gender <- as.numeric(testing$gender)
testing$insurance <- as.numeric(testing$insurance)
testing$min_value <- as.numeric(testing$min_value)
testing$max_value <- as.numeric(testing$max_value)
testing$loinc_code <- as.numeric(testing$loinc_code)
# training <- training[, -3]
# testing <- testing[, -3]
levels(training$hospital_expire_flag) <- c("F", "T")
levels(testing$hospital_expire_flag) <- c("F", "T")
set.seed(56)
train_control <- trainControl(summaryFunction=twoClassSummary,
classProbs = TRUE,
method = "repeatedcv",
number = 5,
repeats = 3,
search = "random",
verboseIter = TRUE)
# Train the model
elastic_net_model <- train(hospital_expire_flag ~ .,
data = training,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 15,
metric="ROC",
trControl = train_control)
elastic_net_model
pred_enet <- predict(elastic_net_model, testing, type = 'prob')
confusionMatrix(testing$hospital_expire_flag, predict(elastic_net_model, testing), positive="T")
elastROC <- roc(testing$hospital_expire_flag, pred_enet[, "T"])
plot.roc(elastROC, print.auc=TRUE, legacy.axes=TRUE)
elastic_net_model
summary(lung)
summary(lung$loinc_code)
str(training)
summary(lung)
anyNA(lung)
summary(lung)
anyNA(lung)
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
# dim(lung)
# colnames(lung)
summary(lung)
anyNA(lung)
suppressMessages(library(caret))
suppressMessages(library(rpart.plot))
suppressMessages(library(pROC))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(DMwR))
suppressMessages(library(corrplot))
lung <- read.table('/Users/student1/Downloads/Lung_Resp_Cancer_Cohort_V2.csv',
header = T, stringsAsFactors = T, sep = ',')
dim(lung)
colnames(lung)
summary(lung)
getwd()
library(shiny); runApp('Desktop/shiny_TRPV6/Top 10 3D_RC.R')
runApp('Desktop/shiny_TRPV6/TRPV6')
options(warn=-1)
suppressMessages(library(ggplot2))
suppressMessages(library(corrplot))
suppressMessages(library(imputeTS))
suppressMessages(library(psych))
suppressMessages(library(pscl))
suppressMessages(library(plotly))
suppressMessages(library(shiny))
suppressMessages(library(caret))
suppressMessages(library(pROC))
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <-  length(LogModel$fitted.values)
R.l <-  1 -  dev / nullDev
R.cs <- 1- exp ( -(nullDev - dev) / modelN)
R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression\n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2           ", round(R.n, 3),    "\n")
}
original_data <- read.csv('run_data_set.csv')
elas_top_10 <- c("gene_80781_COL18A1_rs11702425", "gene_105370531_LOC105370531_rs12147456",
"gene_114793_FMNL2_rs4442949", "gene_100996941_IL21_AS1_rs2137497",
"gene_64067_NPAS3_rs7157155", "gene_56934_CA10_rs16950386",
"gene_105370531_LOC105370531_rs7152965", "gene_284034_LINC00670_rs12150051",
"gene_55503_TRPV6_rs4987667", "gene_6092_ROBO2_rs13087864")
df_Top10 <- original_data[,  (names(original_data) %in% c(elas_top_10, "phenotype"))]
names(df_Top10) <- c("rs11702425", "rs12147456",
"rs4442949", "rs2137497",
"rs7157155", "rs16950386",
"rs7152965", "rs12150051",
"rs4987667", "rs13087864", "phenotype")
df <- df_Top10
y <- df$phenotype
table(df$phenotype)
x <- df[,  !(names(df) %in% c("phenotype"))]
original_data_50thres <- x[, which(colMeans(!is.na(x)) > .6)]
for (column in 1:length(original_data_50thres))
{
original_data_50thres[, column] <- ifelse(is.na(original_data_50thres[,column]) == TRUE,
na_mean(original_data_50thres[,column],option = "mode"),
original_data_50thres[,column])
}
corr <- cor(original_data_50thres[,1:length(original_data_50thres)])
highCorr <- findCorrelation(corr, cutoff = .99, names = T)
clean_data <- original_data_50thres[, !names(original_data_50thres) %in% highCorr]
y <- ifelse(y == "cancer", 1, 0)
pca_varimax <- principal(clean_data, nfactors = 3, rotate = "varimax")
rotation3 <- data.frame(cbind(pca_varimax$score, phenotype= y))
rotation3$phenotype[which(rotation3$phenotype == 0)] <- 'Control'
rotation3$phenotype[which(rotation3$phenotype == 1)] <- 'Cancer'
options(warn=-1)
suppressMessages(library(ggplot2))
suppressMessages(library(corrplot))
suppressMessages(library(imputeTS))
suppressMessages(library(psych))
suppressMessages(library(pscl))
suppressMessages(library(plotly))
suppressMessages(library(shiny))
suppressMessages(library(caret))
suppressMessages(library(pROC))
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <-  length(LogModel$fitted.values)
R.l <-  1 -  dev / nullDev
R.cs <- 1- exp ( -(nullDev - dev) / modelN)
R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression\n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2           ", round(R.n, 3),    "\n")
}
original_data <- read.csv('run_data_set.csv')
elas_top_10 <- c("gene_80781_COL18A1_rs11702425", "gene_105370531_LOC105370531_rs12147456",
"gene_114793_FMNL2_rs4442949", "gene_100996941_IL21_AS1_rs2137497",
"gene_64067_NPAS3_rs7157155", "gene_56934_CA10_rs16950386",
"gene_105370531_LOC105370531_rs7152965", "gene_284034_LINC00670_rs12150051",
"gene_55503_TRPV6_rs4987667", "gene_6092_ROBO2_rs13087864")
df_Top10 <- original_data[,  (names(original_data) %in% c(elas_top_10, "phenotype"))]
names(df_Top10) <- c("rs11702425", "rs12147456",
"rs4442949", "rs2137497",
"rs7157155", "rs16950386",
"rs7152965", "rs12150051",
"rs4987667", "rs13087864", "phenotype")
df <- df_Top10
y <- df$phenotype
table(df$phenotype)
x <- df[,  !(names(df) %in% c("phenotype"))]
original_data_50thres <- x[, which(colMeans(!is.na(x)) > .6)]
for (column in 1:length(original_data_50thres))
{
original_data_50thres[, column] <- ifelse(is.na(original_data_50thres[,column]) == TRUE,
na_mean(original_data_50thres[,column],option = "mode"),
original_data_50thres[,column])
}
corr <- cor(original_data_50thres[,1:length(original_data_50thres)])
highCorr <- findCorrelation(corr, cutoff = .99, names = T)
clean_data <- original_data_50thres[, !names(original_data_50thres) %in% highCorr]
y <- ifelse(y == "cancer", 1, 0)
pca_varimax <- principal(clean_data, nfactors = 3, rotate = "varimax")
rotation3 <- data.frame(cbind(pca_varimax$score, phenotype= y))
rotation3$phenotype[which(rotation3$phenotype == 0)] <- 'Control'
rotation3$phenotype[which(rotation3$phenotype == 1)] <- 'Cancer'
original_data <- read.csv('run_data_set.csv')
elas_top_10 <- c("gene_80781_COL18A1_rs11702425", "gene_105370531_LOC105370531_rs12147456",
"gene_114793_FMNL2_rs4442949", "gene_100996941_IL21_AS1_rs2137497",
"gene_64067_NPAS3_rs7157155", "gene_56934_CA10_rs16950386",
"gene_105370531_LOC105370531_rs7152965", "gene_284034_LINC00670_rs12150051",
"gene_55503_TRPV6_rs4987667", "gene_6092_ROBO2_rs13087864")
options(warn=-1)
suppressMessages(library(ggplot2))
suppressMessages(library(corrplot))
suppressMessages(library(imputeTS))
suppressMessages(library(psych))
suppressMessages(library(pscl))
suppressMessages(library(plotly))
suppressMessages(library(shiny))
suppressMessages(library(caret))
suppressMessages(library(pROC))
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <-  length(LogModel$fitted.values)
R.l <-  1 -  dev / nullDev
R.cs <- 1- exp ( -(nullDev - dev) / modelN)
R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression\n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2           ", round(R.n, 3),    "\n")
}
original_data <- read.csv('/Users/student1/Desktop/shiny_TRPV6/run_data_set.csv')
elas_top_10 <- c("gene_80781_COL18A1_rs11702425", "gene_105370531_LOC105370531_rs12147456",
"gene_114793_FMNL2_rs4442949", "gene_100996941_IL21_AS1_rs2137497",
"gene_64067_NPAS3_rs7157155", "gene_56934_CA10_rs16950386",
"gene_105370531_LOC105370531_rs7152965", "gene_284034_LINC00670_rs12150051",
"gene_55503_TRPV6_rs4987667", "gene_6092_ROBO2_rs13087864")
df_Top10 <- original_data[,  (names(original_data) %in% c(elas_top_10, "phenotype"))]
names(df_Top10) <- c("rs11702425", "rs12147456",
"rs4442949", "rs2137497",
"rs7157155", "rs16950386",
"rs7152965", "rs12150051",
"rs4987667", "rs13087864", "phenotype")
df <- df_Top10
y <- df$phenotype
table(df$phenotype)
x <- df[,  !(names(df) %in% c("phenotype"))]
original_data_50thres <- x[, which(colMeans(!is.na(x)) > .6)]
for (column in 1:length(original_data_50thres))
{
original_data_50thres[, column] <- ifelse(is.na(original_data_50thres[,column]) == TRUE,
na_mean(original_data_50thres[,column],option = "mode"),
original_data_50thres[,column])
}
corr <- cor(original_data_50thres[,1:length(original_data_50thres)])
highCorr <- findCorrelation(corr, cutoff = .99, names = T)
clean_data <- original_data_50thres[, !names(original_data_50thres) %in% highCorr]
y <- ifelse(y == "cancer", 1, 0)
pca_varimax <- principal(clean_data, nfactors = 3, rotate = "varimax")
rotation3 <- data.frame(cbind(pca_varimax$score, phenotype= y))
rotation3$phenotype[which(rotation3$phenotype == 0)] <- 'Control'
rotation3$phenotype[which(rotation3$phenotype == 1)] <- 'Cancer'
write.csv(x = rotation3, file = "/Users/student1/Desktop/shiny_TRPV6/rotation3.csv" )
write.csv(x = rotation3, file = "/Users/student1/Desktop/shiny_TRPV6/rotation3.csv", row.names = F)
rotation3_test <- read.csv('rotation3.csv')
getwd()
setwd('/Users/student1/Desktop/shiny_TRPV6')
rotation3_test <- read.csv('rotation3.csv')
setwd('/Users/student1/Desktop/shiny_TRPV6/TRPV6')
rotation3_test <- read.csv('rotation3.csv')
runApp()
